{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport Login from \"./src/Login\";\nimport UserContext from \"./src/UserContext\";\nimport AuthContext from \"./src/AuthContext\";\nimport Cadastro from \"./src/Cadastro\";\nimport { NativeBaseProvider, StatusBar } from \"native-base\";\nimport \"expo-dev-client\";\nimport auth from \"@react-native-firebase/auth\";\nimport React, { useState, useEffect } from \"react\";\nimport { GoogleSignin, GoogleSigninButton } from \"@react-native-google-signin/google-signin\";\nimport { TEMAS } from \"./src/estilos/temas\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function App() {\n  var _useState = useState(true),\n    _useState2 = _slicedToArray(_useState, 2),\n    initializing = _useState2[0],\n    setInitializing = _useState2[1];\n  var _useState3 = useState(null),\n    _useState4 = _slicedToArray(_useState3, 2),\n    user = _useState4[0],\n    setUser = _useState4[1];\n  GoogleSignin.configure({\n    webClientId: \"102409683902-hgv4s6o0j2e1ab34s7gv0qvpg5otj6dg.apps.googleusercontent.com\"\n  });\n  function onAuthStateChanged(user) {\n    setUser(user);\n    if (initializing) setInitializing(false);\n  }\n  useEffect(function () {\n    var subscriber = auth().onAuthStateChanged(onAuthStateChanged);\n    return subscriber;\n  }, []);\n  var onGoogleButtonPress = function () {\n    var _ref = _asyncToGenerator(function* () {\n      yield GoogleSignin.hasPlayServices({\n        showPlayServicesUpdateDialog: true\n      });\n      var _yield$GoogleSignin$s = yield GoogleSignin.signIn(),\n        idToken = _yield$GoogleSignin$s.idToken;\n      var googleCredential = auth.GoogleAuthProvider.credential(idToken);\n      var user_sign_in = auth().signInWithCredential(googleCredential);\n      user_sign_in.then(function (user) {\n        console.log(user);\n      }).catch(function (error) {\n        console.log(error);\n      });\n    });\n    return function onGoogleButtonPress() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  var signOut = function () {\n    var _ref2 = _asyncToGenerator(function* () {\n      try {\n        yield GoogleSignin.revokeAccess();\n        yield auth().signOut();\n      } catch (error) {\n        console.error(error);\n      }\n    });\n    return function signOut() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  if (initializing) return null;\n  if (!user) {\n    return _jsxs(NativeBaseProvider, {\n      theme: TEMAS,\n      children: [_jsx(StatusBar, {\n        backgroundColor: TEMAS.colors.gray[300]\n      }), _jsx(Login, {}), _jsx(GoogleSigninButton, {\n        style: {\n          width: 300,\n          height: 65,\n          marginBottom: 250,\n          marginLeft: 45,\n          top: 75\n        },\n        onPress: onGoogleButtonPress\n      })]\n    });\n  }\n  return _jsxs(NativeBaseProvider, {\n    theme: TEMAS,\n    children: [_jsx(StatusBar, {\n      backgroundColor: TEMAS.colors.green[500]\n    }), _jsx(UserContext.Provider, {\n      value: user,\n      children: _jsx(AuthContext.Provider, {\n        value: {\n          signOut: signOut\n        },\n        children: _jsx(Cadastro, {})\n      })\n    })]\n  });\n}","map":{"version":3,"names":["Login","UserContext","AuthContext","Cadastro","NativeBaseProvider","StatusBar","auth","React","useState","useEffect","GoogleSignin","GoogleSigninButton","TEMAS","jsx","_jsx","jsxs","_jsxs","App","_useState","_useState2","_slicedToArray","initializing","setInitializing","_useState3","_useState4","user","setUser","configure","webClientId","onAuthStateChanged","subscriber","onGoogleButtonPress","_ref","_asyncToGenerator","hasPlayServices","showPlayServicesUpdateDialog","_yield$GoogleSignin$s","signIn","idToken","googleCredential","GoogleAuthProvider","credential","user_sign_in","signInWithCredential","then","console","log","catch","error","apply","arguments","signOut","_ref2","revokeAccess","theme","children","backgroundColor","colors","gray","style","width","height","marginBottom","marginLeft","top","onPress","green","Provider","value"],"sources":["C:/Users/tiago/Documents/demeter/App.tsx"],"sourcesContent":["import Login from \"./src/Login\";\r\nimport UserContext from \"./src/UserContext\";\r\nimport AuthContext from \"./src/AuthContext\";\r\nimport Cadastro from \"./src/Cadastro\";\r\nimport { NativeBaseProvider, StatusBar } from \"native-base\";\r\nimport \"expo-dev-client\";\r\nimport auth from \"@react-native-firebase/auth\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport {\r\n  GoogleSignin,\r\n  GoogleSigninButton,\r\n} from \"@react-native-google-signin/google-signin\";\r\n\r\nimport { TEMAS } from \"./src/estilos/temas\";\r\n\r\nexport default function App() {\r\n  type User = {\r\n    displayName: string;\r\n    photoURL: string;\r\n    // include other properties as needed\r\n  };\r\n  // Set an initializing state whilst Firebase connects\r\n  const [initializing, setInitializing] = useState(true);\r\n  const [user, setUser] = useState<User | null>(null);\r\n\r\n  GoogleSignin.configure({\r\n    webClientId:\r\n      \"102409683902-hgv4s6o0j2e1ab34s7gv0qvpg5otj6dg.apps.googleusercontent.com\",\r\n  });\r\n\r\n  // Handle user state changes\r\n  function onAuthStateChanged(user) {\r\n    setUser(user);\r\n    if (initializing) setInitializing(false);\r\n  }\r\n\r\n  useEffect(() => {\r\n    const subscriber = auth().onAuthStateChanged(onAuthStateChanged);\r\n    return subscriber; // unsubscribe on unmount\r\n  }, []);\r\n\r\n  const onGoogleButtonPress = async () => {\r\n    // Check if your device supports Google Play\r\n    await GoogleSignin.hasPlayServices({ showPlayServicesUpdateDialog: true });\r\n    // Get the users ID token\r\n    const { idToken } = await GoogleSignin.signIn();\r\n\r\n    // Create a Google credential with the token\r\n    const googleCredential = auth.GoogleAuthProvider.credential(idToken);\r\n\r\n    // Sign-in the user with the credential\r\n    const user_sign_in = auth().signInWithCredential(googleCredential);\r\n    user_sign_in\r\n      .then((user) => {\r\n        console.log(user);\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  const signOut = async () => {\r\n    try {\r\n      await GoogleSignin.revokeAccess();\r\n      await auth().signOut();\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  if (initializing) return null;\r\n  if (!user) {\r\n    return (\r\n      <NativeBaseProvider theme={TEMAS}>\r\n        <StatusBar backgroundColor={TEMAS.colors.gray[300]} />\r\n        <Login />\r\n        <GoogleSigninButton\r\n          style={{\r\n            width: 300,\r\n            height: 65,\r\n            marginBottom: 250,\r\n            marginLeft: 45,\r\n            top: 75,\r\n          }}\r\n          onPress={onGoogleButtonPress}\r\n        />\r\n      </NativeBaseProvider>\r\n    );\r\n  }\r\n  return (\r\n    <NativeBaseProvider theme={TEMAS}>\r\n      <StatusBar backgroundColor={TEMAS.colors.green[500]} />\r\n      <UserContext.Provider value={user}>\r\n        <AuthContext.Provider value={{ signOut }}>\r\n          <Cadastro />\r\n        </AuthContext.Provider>\r\n      </UserContext.Provider>\r\n    </NativeBaseProvider>\r\n  );\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}